package ir.miare.androidcodechallenge.di

import android.content.Context
import android.util.Log
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import ir.logicbase.mockfit.MockFitConfig
import ir.logicbase.mockfit.MockFitInterceptor
import ir.miare.androidcodechallenge.model.remote.Api
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.jackson.JacksonConverterFactory
import java.util.concurrent.TimeUnit
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideContext(@ApplicationContext context: Context): Context = context
//
//    @Provides
//    @Singleton
//    fun provideApplicationContext(application: Application?): Context? {
//        return application
//    }

//    @Provides
//    @Singleton
//    fun provideAssetManager(application: Application): AssetManager? {
//        return application.assets
//    }

    @Provides
    @Singleton
    fun provideOkHttpClient(context: Context): OkHttpClient {
        return OkHttpClient.Builder().addInterceptor(
            MockFitInterceptor(
                bodyFactory = { input -> context.resources.assets.open(input) },
                logger = { tag, message -> Log.d(tag, message) },
                baseUrl = "https://test_baseurl.com/v2/",
                requestPathToJsonMap = MockFitConfig.REQUEST_TO_JSON, // autogenerated constant, just press build button
                mockFilesPath = "",
                mockFitEnable = true,
                apiEnableMock = true,
                apiIncludeIntoMock = arrayOf(),
                apiExcludeFromMock = arrayOf(),
                apiResponseLatency = 1000L,
            ),
        )
            .connectTimeout(20, TimeUnit.SECONDS)
            .writeTimeout(20, TimeUnit.SECONDS)
            .readTimeout(20, TimeUnit.SECONDS)
            .build()
    }

    @Provides
    @Singleton
    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {
        return Retrofit.Builder()
            .baseUrl("https://test_baseurl.com/v2/")
            .addConverterFactory(JacksonConverterFactory.create())
            .client(okHttpClient)
            .build()
    }

    @Provides
    @Singleton
    fun provideApi(retrofit: Retrofit): Api {
        return retrofit.create(Api::class.java)
    }
}
